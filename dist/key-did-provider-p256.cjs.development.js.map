{"version":3,"file":"key-did-provider-p256.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["import { createJWS, ES256Signer } from 'did-jwt'\nimport { HandlerMethods, RPCError, RPCRequest, RPCResponse, createHandler, SendRequestFunc } from 'rpc-utils'\nimport type { AuthParams, CreateJWSParams, DIDMethodName, DIDProviderMethods, DIDProvider, GeneralJWS } from 'dids'\nimport stringify from 'fast-json-stable-stringify'\nimport * as u8a from 'uint8arrays'\n// import { ec as EC } from 'elliptic'\nimport pkg from 'elliptic';\nconst { ec: EC } = pkg;\nimport { compressedKeyInHexfromRaw, encodeDIDfromHexString, rawKeyInHexfromUncompressed} from 'did-key-creator'\n\nconst ec = new EC('p256')\n\nfunction toStableObject(obj: Record<string, any>): Record<string, any> {\n  return JSON.parse(stringify(obj)) as Record<string, any>\n}\n\n// import function encodeDIDfromBytes from key-did-creator, import as npm module ...\n// https://github.com/bshambaugh/did-key-creator/blob/main/src/encodeDIDkey.ts#L14\n\nfunction toGeneralJWS(jws: string): GeneralJWS {\n  const [protectedHeader, payload, signature] = jws.split('.')\n  return {\n    payload,\n    signatures: [{ protected: protectedHeader, signature }],\n  }\n}\n\ninterface Context {\n  did: string\n  privateKey: Uint8Array\n}\n\n\nconst sign = async (\n  payload: Record<string, any> | string,\n  did: string,\n  secretKey: Uint8Array, // need special function for remote signer, because private key is remote\n  protectedHeader: Record<string, any> = {}\n) => {\n  const kid = `${did}#${did.split(':')[2]}`\n  const signer = ES256Signer(secretKey)\n  const header = toStableObject(Object.assign(protectedHeader, { kid, alg: 'ES256' }))\n  return createJWS(typeof payload === 'string' ? payload : toStableObject(payload), signer, header)\n}\n\nconst didMethods: HandlerMethods<Context, DIDProviderMethods> = {\n  did_authenticate: async ({ did, privateKey }, params: AuthParams) => {\n    const response = await sign(\n      {\n        did,\n        aud: params.aud,\n        nonce: params.nonce,\n        paths: params.paths,\n        exp: Math.floor(Date.now() / 1000) + 600, // expires 10 min from now\n      },\n      did,\n      privateKey\n    )\n    return toGeneralJWS(response)\n  },\n  did_createJWS: async ({ did, privateKey }, params: CreateJWSParams & { did: string }) => {\n    const requestDid = params.did.split('#')[0]\n    if (requestDid !== did) throw new RPCError(4100, `Unknown DID: ${did}`)\n    const jws = await sign(params.payload, did, privateKey, params.protected)\n    return { jws: toGeneralJWS(jws) }\n  },\n  did_decryptJWE: async () => {\n     // this needs to be implemented in the did-jwt library\n     // const decrypter = ecdhEsA256KwDecrypter(params.jwe, decrypter)\n     // instead of the 4100 Error, emulate the commented out code below...\n     // this will be able to change when did-jwt supports ES256 for JWE \n     // https://github.com/decentralized-identity/did-jwt/issues/225\n     throw new RPCError(4100, 'Decryption not supported')\n  },\n  /*\n  did_decryptJWE: async ({ secretKey }, params: DecryptJWEParams) => {\n    const decrypter = x25519Decrypter(convertSecretKeyToX25519(secretKey))\n    try {\n      const bytes = await decryptJWE(params.jwe, decrypter)\n      return { cleartext: u8a.toString(bytes, B64) }\n    } catch (e) {\n      throw new RPCError(-32000, (e as Error).message)\n    }\n  },\n  */\n}\n\nexport class P256Provider implements DIDProvider {\n  _handle: SendRequestFunc<DIDProviderMethods>\n\n  constructor(secretKey: Uint8Array) {\n    // just use the library elliptic to do this...\n    const kp = ec.keyFromPrivate(secretKey)\n    const publicKey = String(kp.getPublic('hex'))\n    const compressedPublicKey = compressedKeyInHexfromRaw(rawKeyInHexfromUncompressed(publicKey))\n    const privateKey = u8a.fromString(String(kp.getPrivate('hex')),'hex')\n    const did = encodeDIDfromHexString('p256-pub',compressedPublicKey) // replace with encodeDIDfromBytes from did-key-creator\n    const handler = createHandler<Context, DIDProviderMethods>(didMethods)\n    this._handle = async (msg) => await handler({ did, privateKey }, msg)\n  }\n\n  get isDidProvider(): boolean {\n    return true\n  }\n\n  async send<Name extends DIDMethodName>(\n    msg: RPCRequest<DIDProviderMethods, Name>\n  ): Promise<RPCResponse<DIDProviderMethods, Name> | null> {\n    return await this._handle(msg)\n  }\n}\n"],"names":["EC","pkg","ec","toStableObject","obj","JSON","parse","stringify","toGeneralJWS","jws","split","protectedHeader","payload","signature","signatures","sign","did","secretKey","kid","signer","ES256Signer","header","Object","assign","alg","createJWS","didMethods","did_authenticate","params","privateKey","aud","nonce","paths","exp","Math","floor","Date","now","response","did_createJWS","requestDid","RPCError","did_decryptJWE","P256Provider","kp","keyFromPrivate","publicKey","String","getPublic","compressedPublicKey","compressedKeyInHexfromRaw","rawKeyInHexfromUncompressed","u8a","getPrivate","encodeDIDfromHexString","handler","createHandler","_handle","msg","send"],"mappings":"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"}