{"version":3,"file":"key-did-provider-p256.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { createJWS, ES256Signer } from 'did-jwt'\nimport { HandlerMethods, RPCError, RPCRequest, RPCResponse, createHandler, SendRequestFunc } from 'rpc-utils'\nimport type { AuthParams, CreateJWSParams, DIDMethodName, DIDProviderMethods, DIDProvider, GeneralJWS } from 'dids'\nimport stringify from 'fast-json-stable-stringify'\nimport * as u8a from 'uint8arrays'\n// import { ec as EC } from 'elliptic'\nimport pkg from 'elliptic';\nconst { ec: EC } = pkg;\nimport { compressedKeyInHexfromRaw, encodeDIDfromHexString, rawKeyInHexfromUncompressed} from 'did-key-creator'\n\nconst ec = new EC('p256')\n\nfunction toStableObject(obj: Record<string, any>): Record<string, any> {\n  return JSON.parse(stringify(obj)) as Record<string, any>\n}\n\n// import function encodeDIDfromBytes from key-did-creator, import as npm module ...\n// https://github.com/bshambaugh/did-key-creator/blob/main/src/encodeDIDkey.ts#L14\n\nfunction toGeneralJWS(jws: string): GeneralJWS {\n  const [protectedHeader, payload, signature] = jws.split('.')\n  return {\n    payload,\n    signatures: [{ protected: protectedHeader, signature }],\n  }\n}\n\ninterface Context {\n  did: string\n  privateKey: Uint8Array\n}\n\n\nconst sign = async (\n  payload: Record<string, any> | string,\n  did: string,\n  secretKey: Uint8Array, // need special function for remote signer, because private key is remote\n  protectedHeader: Record<string, any> = {}\n) => {\n  const kid = `${did}#${did.split(':')[2]}`\n  const signer = ES256Signer(secretKey)\n  const header = toStableObject(Object.assign(protectedHeader, { kid, alg: 'ES256' }))\n  return createJWS(typeof payload === 'string' ? payload : toStableObject(payload), signer, header)\n}\n\nconst didMethods: HandlerMethods<Context, DIDProviderMethods> = {\n  did_authenticate: async ({ did, privateKey }, params: AuthParams) => {\n    const response = await sign(\n      {\n        did,\n        aud: params.aud,\n        nonce: params.nonce,\n        paths: params.paths,\n        exp: Math.floor(Date.now() / 1000) + 600, // expires 10 min from now\n      },\n      did,\n      privateKey\n    )\n    return toGeneralJWS(response)\n  },\n  did_createJWS: async ({ did, privateKey }, params: CreateJWSParams & { did: string }) => {\n    const requestDid = params.did.split('#')[0]\n    if (requestDid !== did) throw new RPCError(4100, `Unknown DID: ${did}`)\n    const jws = await sign(params.payload, did, privateKey, params.protected)\n    return { jws: toGeneralJWS(jws) }\n  },\n  did_decryptJWE: async () => {\n     // this needs to be implemented in the did-jwt library\n     // const decrypter = ecdhEsA256KwDecrypter(params.jwe, decrypter)\n     // instead of the 4100 Error, emulate the commented out code below...\n     // this will be able to change when did-jwt supports ES256 for JWE \n     // https://github.com/decentralized-identity/did-jwt/issues/225\n     throw new RPCError(4100, 'Decryption not supported')\n  },\n  /*\n  did_decryptJWE: async ({ secretKey }, params: DecryptJWEParams) => {\n    const decrypter = x25519Decrypter(convertSecretKeyToX25519(secretKey))\n    try {\n      const bytes = await decryptJWE(params.jwe, decrypter)\n      return { cleartext: u8a.toString(bytes, B64) }\n    } catch (e) {\n      throw new RPCError(-32000, (e as Error).message)\n    }\n  },\n  */\n}\n\nexport class P256Provider implements DIDProvider {\n  _handle: SendRequestFunc<DIDProviderMethods>\n\n  constructor(secretKey: Uint8Array) {\n    // just use the library elliptic to do this...\n    const kp = ec.keyFromPrivate(secretKey)\n    const publicKey = String(kp.getPublic('hex'))\n    const compressedPublicKey = compressedKeyInHexfromRaw(rawKeyInHexfromUncompressed(publicKey))\n    const privateKey = u8a.fromString(String(kp.getPrivate('hex')),'hex')\n    const did = encodeDIDfromHexString('p256-pub',compressedPublicKey) // replace with encodeDIDfromBytes from did-key-creator\n    const handler = createHandler<Context, DIDProviderMethods>(didMethods)\n    this._handle = async (msg) => await handler({ did, privateKey }, msg)\n  }\n\n  get isDidProvider(): boolean {\n    return true\n  }\n\n  async send<Name extends DIDMethodName>(\n    msg: RPCRequest<DIDProviderMethods, Name>\n  ): Promise<RPCResponse<DIDProviderMethods, Name> | null> {\n    return await this._handle(msg)\n  }\n}\n"],"names":["ec","EC","pkg","toStableObject","obj","JSON","parse","stringify","toGeneralJWS","jws","split","payload","signatures","protected","signature","sign","did","secretKey","protectedHeader","kid","signer","ES256Signer","header","Object","assign","alg","createJWS","didMethods","did_authenticate","params","privateKey","_context2","aud","nonce","paths","exp","Math","floor","Date","now","did_createJWS","_context3","RPCError","did_decryptJWE","kp","keyFromPrivate","publicKey","String","getPublic","compressedPublicKey","compressedKeyInHexfromRaw","rawKeyInHexfromUncompressed","u8a","getPrivate","encodeDIDfromHexString","handler","createHandler","this","_handle","msg","_context5","send","_context6","key","get"],"mappings":"yjOAOA,IAGMA,EAAK,IAAIC,EAHIC,EAAXF,IAGU,QAElB,SAASG,EAAeC,GACtB,OAAOC,KAAKC,MAAMC,EAAUH,IAM9B,SAASI,EAAaC,GACpB,MAA8CA,EAAIC,MAAM,KACxD,MAAO,CACLC,aACAC,WAAY,CAAC,CAAEC,eAA4BC,kBAU/C,IAAMC,aAAI,kBAAG,WACXJ,EACAK,EACAC,EACAC,8EAIoF,gBAJpFA,IAAAA,EAAuC,IAEjCC,EAASH,MAAOA,EAAIN,MAAM,KAAK,GAC/BU,EAASC,cAAYJ,GACrBK,EAASnB,EAAeoB,OAAOC,OAAON,EAAiB,CAAEC,IAAAA,EAAKM,IAAK,6BAClEC,YAA6B,iBAAZf,EAAuBA,EAAUR,EAAeQ,GAAUS,EAAQE,IAAO,OAAA,UAAA,0BAClG,yBAVS,mCAYJK,EAA0D,CAC9DC,4BAAgB,kBAAE,aAA4BC,GAAkB,QAAA,6BAAA,OAAA,sBAAA,OAAtB,OAAfb,IAAAA,IAAKc,IAAAA,WAAUC,SACjBhB,EACrB,CACEC,IAAAA,EACAgB,IAAKH,EAAOG,IACZC,MAAOJ,EAAOI,MACdC,MAAOL,EAAOK,MACdC,IAAKC,KAAKC,MAAMC,KAAKC,MAAQ,KAAQ,KAEvCvB,EACAc,GACD,OAVa,yBAWPtB,WAAsB,OAAA,UAAA,0BAC9B,OAAA,cAAA,mCACDgC,yBAAa,kBAAE,aAA4BX,GAAyC,QAAA,6BAAA,OAAA,sBAAA,OACvC,GADrBb,IAAAA,IAAKc,IAAAA,WACRD,EAAOb,IAAIN,MAAM,KAAK,KACtBM,GAAGyB,SAAA,MAAA,MAAQ,IAAIC,WAAS,qBAAsB1B,GAAM,OAAA,OAAAyB,SACrD1B,EAAKc,EAAOlB,QAASK,EAAKc,EAAYD,aAAiB,OAAhE,yBACF,CAAEpB,IAAKD,YAAmB,OAAA,UAAA,0BAClC,OAAA,cAAA,mCACDmC,0BAAc,kBAAE,aAAA,6BAAA,OAAA,sBAAA,OAAA,MAMP,IAAID,WAAS,KAAM,4BAA2B,OAAA,UAAA,0BACtD,OAAA,WAAA,oEAiBD,WAAYzB,GAEV,IAAM2B,EAAK5C,EAAG6C,eAAe5B,GACvB6B,EAAYC,OAAOH,EAAGI,UAAU,QAChCC,EAAsBC,4BAA0BC,8BAA4BL,IAC5EhB,EAAasB,aAAeL,OAAOH,EAAGS,WAAW,QAAQ,OACzDrC,EAAMsC,yBAAuB,WAAWL,GACxCM,EAAUC,gBAA2C7B,GAC3D8B,KAAKC,mBAAO,kBAAG,WAAOC,GAAG,6BAAA,OAAA,sBAAA,OAAA,OAAAC,SAAWL,EAAQ,CAAEvC,IAAAA,EAAKc,WAAAA,GAAc6B,GAAI,OAAA,iCAAA,OAAA,UAAA,0BAAA,mBAAA,mCACtE,QAIA,mBAEKE,gBAAI,kBAAV,WACEF,GAAyC,6BAAA,OAAA,sBAAA,OAAA,OAAAG,SAE5BL,KAAKC,QAAQC,GAAI,OAAA,iCAAA,OAAA,UAAA,+BAC/B,OAAA,YAAA,4CAAAI,oBAAAC,IARD,WACE,OAAO"}